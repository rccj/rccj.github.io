<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020非本科轉職前端工程師【心路歷程】</title>
    <url>/2020/05/29/002/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>距上次更新已經八個多月，除了工作上學到的新東西，好像沒有當初自學時的那股衝勁與熱情，自學期間的我，每天至少六小時以上，有時一天只要吃一餐，就怕思緒被打斷只為了解一個Bug，持續了半年。現在我還是覺得前端的一切很好玩，但怎麼說呢，<br>.<br>.<br>.</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/002/1579416003413.jpg" alt="我就懶"><br>(圖片來源: <a href="https://memes.tw/wtf/133544" target="_blank" rel="noopener">https://memes.tw/wtf/133544</a>)</p>
<p>有聽人說過，你知道五六年前是沒有前端工程師這職位的，技術變更很快，前端是學不完的，如果只會在原地踏步，三五年後可能也無法生存。<br>所以我不想耍廢，但也不知道要寫什麼，就從些基本的開始，累積點東西吧!</p>
<h1 id="先說結論"><a href="#先說結論" class="headerlink" title="先說結論"></a>先說結論</h1><h2 id="不要用var"><a href="#不要用var" class="headerlink" title="不要用var"></a>不要用var</h2><p>現在的工作專案上，已經很少看到var了（至少我工作上沒用過），比起var，盡量使用let、const，可以避免掉全域汙染、重複宣告…等很多不必要的麻煩。</p>
<h1 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h1><p>在程式裡，會大量使用到變數，要使用變數就要先執行宣告。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is not defined'　沒有被宣告所以不認識</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 告訴程式，有一個名為foo的變數產生，並賦予值10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h1 id="為什麼用let-不用var"><a href="#為什麼用let-不用var" class="headerlink" title="為什麼用let 不用var"></a>為什麼用let 不用var</h1><h2 id="1-全域變數、區域變數"><a href="#1-全域變數、區域變數" class="headerlink" title="1.全域變數、區域變數"></a>1.全域變數、區域變數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//全域性作用</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>; <span class="comment">//作用在當前區塊的變數</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); </span><br><span class="line">  <span class="built_in">console</span>.log(b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 10, 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//10 以瀏覽器為例，全域就是window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="2-block-level-scope（塊級作用域）"><a href="#2-block-level-scope（塊級作用域）" class="headerlink" title="2.block-level scope（塊級作用域）"></a>2.block-level scope（塊級作用域）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//存在於函式中</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span>;　<span class="comment">//存在於整個全域，這裡的全域是整個function</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">40</span>; <span class="comment">//只存在"&#123;&#125;"區塊</span></span><br><span class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//30</span></span><br><span class="line">    <span class="built_in">console</span>.log(d);<span class="comment">//40 存在"&#123;&#125;"中的區塊不會外洩</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//20</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">//30</span></span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">//'d is not defined'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 10, 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//'a is not undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//'b is not defined'</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//40</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//'d is not defined'</span></span><br></pre></td></tr></table></figure>
<p>let 是塊級作用域，簡言之，他是存在於”{}”內的，像是if,while…等用到”{}”判斷、迴圈之類的，跟function的函示作用域不同</p>
<h2 id="3-沒有hoising（變量提升）"><a href="#3-沒有hoising（變量提升）" class="headerlink" title="3.沒有hoising（變量提升）"></a>3.沒有hoising（變量提升）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is not defined'</span></span><br></pre></td></tr></table></figure>
<p>剛剛有提到在程式中要用到變數就需要先宣告，我要使用到<strong>foo</strong>(範例用的變數名稱)，如果沒有先宣告的就會會跑出<strong>foo is not defined</strong>報錯訊息，意思是這個<strong>foo</strong>並沒有被定義過，程式不認識<strong>foo</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is undefined'　宣告後但沒有值</span></span><br><span class="line"></span><br><span class="line">foo = <span class="number">10</span>　<span class="comment">//賦予foo值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p><strong>foo</strong>被宣告了以後，就可以取用，不過還沒賦予值的<strong>foo</strong>會跑出<strong>foo is undefined</strong>的警告訊息，並不會報錯</p>
<h3 id="如果不按順序宣告呢"><a href="#如果不按順序宣告呢" class="headerlink" title="如果不按順序宣告呢"></a>如果不按順序宣告呢</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">var</span> foo;</span><br></pre></td></tr></table></figure>
<p>剛剛學到了要先宣告foo才能取用，不然會出現<strong>foo is not defined</strong><br>結果是<br>.<br>.<br>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is undefined'</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>只要有宣告，就會把變數提升到最上面，不管先後順序都可以呼叫到，這就是<strong>hoising變量提升）</strong>，不過賦值並不會跟著提升。<br>換作是let呢<br>.<br>.<br>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'Uncaught ReferenceError: Cannot access 'foo' before initialization'</span></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>這是什麼東東<br>.<br>.<br>.</p>
<h3 id="temporal-dead-zone-TDZ-暫時性死區"><a href="#temporal-dead-zone-TDZ-暫時性死區" class="headerlink" title="temporal dead zone, TDZ (暫時性死區)"></a>temporal dead zone, TDZ (暫時性死區)</h3><p>let沒有hoising（變量提升），使用let時會使區塊形成封閉的作用域，換句話說</p>
<h3 id="在還沒宣告以前都不能使用它"><a href="#在還沒宣告以前都不能使用它" class="headerlink" title="在還沒宣告以前都不能使用它"></a>在還沒宣告以前都不能使用它</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'Uncaught ReferenceError: Cannot access 'foo' before initialization'</span></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//'foo is undefined'</span></span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h2 id="4-不允許重複宣告"><a href="#4-不允許重複宣告" class="headerlink" title="4.不允許重複宣告"></a>4.不允許重複宣告</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>foo已經用var宣告過了，又可以重複宣告不會報錯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>; <span class="comment">//我在這裡是唯一的foo，不准覆蓋我</span></span><br><span class="line">foo = <span class="number">20</span> <span class="comment">// 20 賦值還是可以的</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">20</span>; <span class="comment">// 'foo' has already been declared</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">20</span>; <span class="comment">// 'foo' has already been declared</span></span><br></pre></td></tr></table></figure>
<p>使用let宣告後的變數，如果重複宣告會報錯，因此使用let可以避免掉重複取名覆蓋掉變數的問題。</p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const 特性與let大多相似，但</p>
<h2 id="1-一定要有值"><a href="#1-一定要有值" class="headerlink" title="1.一定要有值"></a>1.一定要有值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLuckyNumber; <span class="comment">//Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<p>宣告時一定要賦予值</p>
<h2 id="2-不可重複賦予值"><a href="#2-不可重複賦予值" class="headerlink" title="2.不可重複賦予值"></a>2.不可重複賦予值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(myLuckyNumber)<span class="comment">//7</span></span><br><span class="line">myLuckyNumber = <span class="number">8</span>　<span class="comment">// Assignment to constant variable'</span></span><br><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">8</span> <span class="comment">// 'myLuckyNumber' has already been declared</span></span><br></pre></td></tr></table></figure>
<p>const為’常數’，不可重複賦予值與宣告，所以通常是用來放不會變的值，我的幸運數字是’7’不會變。</p>
<h2 id="3-物件依然是參考"><a href="#3-物件依然是參考" class="headerlink" title="3.物件依然是參考"></a>3.物件依然是參考</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//5</span></span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<p>剛剛第二點不是說’不可重複賦予值’，怎麼又可以更改裡面的值，那是因為物件是傳參考(by reference)而非傳值(by value)，所以在此依然可以修改屬性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="comment">//'person' has already been declared </span></span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">'Roman'</span><span class="comment">//'person' has already been declared</span></span><br></pre></td></tr></table></figure>
<h3 id="不能重複指定值、但依然可以修改屬性。"><a href="#不能重複指定值、但依然可以修改屬性。" class="headerlink" title="不能重複指定值、但依然可以修改屬性。"></a>不能重複指定值、但依然可以修改屬性。</h3><h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這主題應該是很多人的第一篇文，都看到爛了，但自己實際下來寫感覺又很新奇。<br>在工作上很多用法都已經習以為常，知道怎麼使用這些宣告，對專案比較好，但如果突然我問我差別或是以上這些東西，一時間還真的會呆滯個幾秒鐘，不知道怎麼解釋，這就是為什麼要自己整理一遍，雖然是基本的東西，但底層越穩健，累積起來對以後整個思考的邏輯會很有幫助。</p>
<p>如果本篇有哪個地方有誤，歡迎指教：）</p>
<p>想看更詳細的解說可以點擊下方參考資料。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://cythilya.github.io/2016/10/28/es6-let-const-block-level-scope/" target="_blank" rel="noopener">Summer。桑莫。夏天：ES6: let, const, Block-Level Scope</a><br><a href="https://eddychang.me/es6-tdz/" target="_blank" rel="noopener">EddyChang：理解ES6中的暫時死區(TDZ)</a><br><a href="https://blog.csdn.net/u013263917/article/details/106673193" target="_blank" rel="noopener">坤小：var与let区别-详解块级作用域与局部作用域</a><br><a href="https://wcc723.github.io/javascript/2017/12/20/javascript-es6-let-const/" target="_blank" rel="noopener">卡斯伯：ES6 開始的新生活 let, const</a></p>
]]></content>
      <categories>
        <category>轉職心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>心得</tag>
        <tag>前端工程師</tag>
      </tags>
  </entry>
  <entry>
    <title>2020非本科轉職前端工程師【心路歷程】</title>
    <url>/2020/05/29/2020onTansfer/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/DO-MORE.jpg" alt="do-more"></p>
<a id="more"></a>
<center>圖片來源： 網路</center>
<br>

<blockquote>
<p><strong>DO MORE</strong></p>
</blockquote>
<p>這是我的桌布，源自我最喜歡的YouTuber「<strong>CaseyNeistat</strong>」，</p>
<p>別人看不到你努力，<strong>DO MORE</strong><br>達不到自己的目標，<strong>DO MORE</strong></p>
<p>很多時候不是沒有辦法，只是你需要比別人再多努力一些。<br><del>(雖然原意好像不是這樣)</del></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從第一次聽到前端到找到第一份前端工作，歷經近半年的時間，終於在六月一號要正式報到了，想在正式上班前做個紀錄，不然說不定下禮拜就離職了（笑<br><br></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>私立科技大學設計科系畢業，說來慚愧，學生時期有接觸過遊戲課程，但卻對遊戲程式的部分興致缺缺，或是說不願意面對，覺得很麻煩、排斥，結果我現在…<br><br></p>
<h2 id="結束澳洲打工度假"><a href="#結束澳洲打工度假" class="headerlink" title="結束澳洲打工度假"></a>結束澳洲打工度假</h2><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/cover.jpg" alt="Daily-VLOG" title="我的第一支Daily-VLOG"><br>圖片來源：<a href="https://www.youtube.com/watch?v=Nn4M9d89yUo&t" target="_blank" rel="noopener">Roman羅曼</a> </p>
<br>

<p>2019/11月澳洲打工度假結束，我在峇里島玩了兩個禮拜，11月回到台灣。</p>
<p>當時的我還在天天更新我的<a href="https://www.youtube.com/watch?v=5WJIU2soJlY&t" target="_blank" rel="noopener">生活Vlog</a> ，經營自己的YouTube頻道，天真如我想著，靠在澳洲存到的錢，支持我在台灣的YouTube拍片事業，給自己半年的時間專心做做看，說不定有搞頭，但越做越對這一切感受到疲乏…</p>
<h3 id="拍片還是當興趣好"><a href="#拍片還是當興趣好" class="headerlink" title="拍片還是當興趣好"></a>拍片還是當興趣好</h3><p>雖然拍出來的生活Vlog都是我自己喜歡的東西，但點閱率實在有點慘，拍了一些觀眾取向的影片，自己又很不喜歡，好幾次為了拍影片不開心，很不想承認，但如果要把YouTuber當全職…<br><br><br><strong>可能還是不太適合我</strong><br><br><br><br></p>
<h2 id="第一次聽到前端工程師"><a href="#第一次聽到前端工程師" class="headerlink" title="第一次聽到前端工程師"></a>第一次聽到前端工程師</h2><p>11月底，某一次的飯局得知我的好朋友，<br>居然是…<br><strong>前端工程師</strong>?!<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/surprise.jpg" alt="surprise"></p>
<center>圖片來源： 網路</center>

<br>
什麼前端後端中端的，我不懂啦！

<p><strong>工程師</strong>欸，聽起來超帥的！</p>
<p>要寫程式？！</p>
<p>什麼？已經工作一年了？！</p>
<p>意想不到…</p>
<p>他說他靠著職訓局，還有自學（這是重點），成功轉職所謂的前端工程師。</p>
<p>雖然工程師聽起來很威，</p>
<p>但其實我聽到的當下第一個反應…</p>
<h3 id="原來前端工程師那麼好當喔"><a href="#原來前端工程師那麼好當喔" class="headerlink" title="原來前端工程師那麼好當喔"></a>原來前端工程師那麼好當喔</h3><p>但開始學習後…<br>.<br>.<br>.<br>.<br>.<br><br><br><br><br><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/cat.jpg" alt="When I learning"></p>
<center>圖片來源： 網路</center>

<h3 id="怎麼都看不懂"><a href="#怎麼都看不懂" class="headerlink" title="怎麼都看不懂"></a>怎麼都看不懂</h3><p>一個那麼要好的朋友突然成了工程師，對於前端工程師，好奇心大爆發，我開始尋找相關資料，以及相關知識。</p>
<p>原本是想說如果我朋友能懂這些東西，我一定也能懂，殊不知越看越蒙，越看越崇拜他…與其說是不服輸，不如說，他讓我看到了一些不一樣的希望？只要努力去學程式，沒有學不會的，可以看到努力的成果，大學時期對程式的排斥，逐漸瓦解…<br><br></p>
<h2 id="我要當前端工程師"><a href="#我要當前端工程師" class="headerlink" title="我要當前端工程師"></a>我要當前端工程師</h2><p>定下學習目標，跟自己說</p>
<blockquote>
<p><strong>六月的時候，我就是前端工程師了</strong></p>
</blockquote>
<p>正式投入學習後，剛開始在家學習，也有跑過圖書館，後來覺得出門很浪費時間，而且圖書館有股想睡覺的魔力，就乾脆在家裡，反正效果也不差，重點是要約束自己，不要分心。<br>每個人的讀書方式都不一樣，可以參考網路上的人，如果不適合就果斷換，找出適合自己的讀書方式，才能有效率的學習。<br><br></p>
<h3 id="線上課程，試試水溫"><a href="#線上課程，試試水溫" class="headerlink" title="線上課程，試試水溫"></a>線上課程，試試水溫</h3><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/udemy-logo.jpg" alt="Udemy"></p>
<center>圖片來源：Udemy</center>
<br>

<p>同年12月底，我在Udemy挑了一個特價300元，4顆星以上的前端入門課程，內容包含HTML、CSS、JavaScript，想說聽聽看，如果真的對寫程式有興趣再投入，如果覺得很無聊，就算了，反正300塊而已。</p>
<p>這邊也非常推薦不知道自己適不適合的人，可以直接去買一堂課來聽聽看，有些基礎的東西，免費資源跟付費資源還是有差別的，有點基礎在看免費資源，比較能理解那些東西在幹嘛。</p>
<p>其實當初剛開始上線上課程時，我常常聽到睡著，<del>可能跟圖書館有關</del>，後來過了某個階段後，對整體的架構越來越清楚，睡著的次數越來越少，甚至直接熬夜，只為了完成一個小功能。<br><br><br><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/hexschool-logo.jpg" alt="hexschool"></p>
<center>圖片來源：六角學院</center>
<br>
上到2020年1月，我買了六角的JavaScript入門課程，六角在線上課程界的地位無庸置疑，擁有許多成功轉職的學員，講師把課程內容講解地平易近人，對於剛入門的我來說，課程非常值得，不得不說，六角的社群經營得非常成功，臉書社團還有群組，有任何問題在上面發問，大家都會非常熱心地回答，就算人緣不好，至少還有專屬的助教跟老師會替你友善的解答，非常用心。



<h3 id="全職學習"><a href="#全職學習" class="headerlink" title="全職學習"></a>全職學習</h3><p>1月開始，沒有工作的我，除了一些特殊節日，或旅遊，每天的生活就是</p>
<p><strong>起床&gt;學習&gt;吃飯&gt;學習&gt;吃飯&gt;學習&gt;睡覺</strong></p>
<p>日復一日，每天過得差不多的生活，偶爾跟朋友見個面吃個飯，回家繼續學習，禮拜一到日，平均學習時數，保守估計至少六小時以上，注意，是「保守估計」，常常會到半夜一兩點才睡，只為了解一個Bug，非本科系畢業的我知道，也程式方面沒有特別的天份，需要更多的學習時間，才能縮小這些差距，現在回想起來，這好像是我第一次，花那麼多時間在持續的學習某項技能上面，這應該就是對寫程式的熱忱吧。<br><br></p>
<h3 id="學習夥伴"><a href="#學習夥伴" class="headerlink" title="學習夥伴"></a>學習夥伴</h3><p>自已學習以外，有個可以互相討論，發問的對象也是很重要的，除了線上課程上的老師，我還有已經在業界的工程師朋友，大約每1-3個禮拜，我們會相約去咖啡廳，向他了解前端技術的問題，而他也不是告訴直接我答案，是引導我想出答案，興致來了，還會告訴我一大堆他覺得我要會的東西，將來會遇到的問題，<del>儘管有時會我根本聽不懂（資訊量過大）</del>，我很幸運學習的路上有這位朋友。<br><br></p>
<h3 id="充滿好奇＆自學能力"><a href="#充滿好奇＆自學能力" class="headerlink" title="充滿好奇＆自學能力"></a>充滿好奇＆自學能力</h3><p>前端領域需要學習大量的技術，有些東西不可能都等別人來教，才來應用，官方網站的文件，有時候可能是最快的學習途徑，充滿好奇以及自學能力在這行非常重要，東西只會越來越多，我感到非常喜歡，有種學不完的感覺，頗有挑戰性。</p>
<p>有人說前端領域，入門容易挖深難，踏入之後，你會發現要學的東西越來越多，技術觀念可能每幾年幾個月，就要更新一次，所以前端工程師務必要有熱情，沒有熱情、沒有好奇心，可能3-5年後就會被淘汰了。<br><br></p>
<h2 id="學習瓶頸-amp-挫折"><a href="#學習瓶頸-amp-挫折" class="headerlink" title="學習瓶頸&amp;挫折"></a>學習瓶頸&amp;挫折</h2><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/coding.jpg" alt="When I coding"></p>
<center>圖片來源：網路</center>
<br>

<p>在學習的過程中，好幾次的懷疑自己的智商，懷疑人生，會不斷的遭遇挫折掉入谷底，你只能不斷的爬出來，解決這些你面臨的問題，除不完的Bug，一個語法錯誤卡了一個下午，各式各樣的狀況與挫折就不在一一舉例，這是新手必經之路。<br><br></p>
<blockquote>
<p>當工程師就是要去習慣甚至享受解決問題的過程</p>
</blockquote>
<br>


<p><strong>為什麼我不懂</strong></p>
<p><strong>我好笨</strong></p>
<p>這些聲音在學習的路上不斷出現，看著那些工程師，不免浮出這些聲音，覺得自己很笨，可能不適合寫程式，他們感覺學得很輕鬆…</p>
<br>

<blockquote>
<p>你不知道他們付出多少努力</p>
</blockquote>
<br>

<p>大多數的人都不是天才，你不知道他們花了多久時間，付諸多少努力，才有現在你所看到的樣子，我朋友跟我說，你踩過的坑，遇過的Bug，那些你所謂的高手，他們學習時遇到的不會比你少。<br><br></p>
<h2 id="投履歷＆找到工作"><a href="#投履歷＆找到工作" class="headerlink" title="投履歷＆找到工作"></a>投履歷＆找到工作</h2><p>雖然沒有完成每一項學習計畫，但大方向沒有偏離，持續的前往，1月到3月，基礎的課程都結束以後，我花了整個4月，一個月的時間，完成一個<a href="https://rccj.github.io/roman-store/#/">電商網站</a>，以電商網站為主加一些零星的小作業完成的履歷，開始狂投遞，獲得面試機會，如期在六月份的時候準備前往第一份前端工程師的工作。</p>
<p>關於面試，又是另一個故事了，有時間我會整理相關資訊，</p>
<p>跟大家分享～</p>
<br>

<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>本來想要打出很厲害的心路歷程文章，卻變成想到什麼打什麼的大雜燴，但比想像中的內容還精簡，希望讀者不會介意，如果有想到什麼會再回來補充，讓文章更完整。</p>
]]></content>
      <categories>
        <category>轉職心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>心得</tag>
        <tag>前端工程師</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/23/hello-world/</url>
    <content><![CDATA[<h1 id="明天再更新"><a href="#明天再更新" class="headerlink" title="明天再更新"></a>明天再更新</h1><p>ㄎㄎ </p>
]]></content>
      <categories>
        <category>First</category>
      </categories>
      <tags>
        <tag>First</tag>
      </tags>
  </entry>
</search>
