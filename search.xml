<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>What is &quot;this&quot; in JavaScript</title>
    <url>/2021/11/20/javascript-this/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/javascript-this-00.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此次筆記根據<code>姚偉揚</code>老師的直播影片<a href="https://www.facebook.com/hilivecode/videos/190238981712769" target="_blank" rel="noopener">一次搞懂 JavaScript 的 #this、this 還有那個 this</a>做的紀錄，有興趣的可以直接看影片，主講者講得很清楚，還會跟你互動。</p>
<a id="more"></a>

<h1 id="this-是什麼"><a href="#this-是什麼" class="headerlink" title="this 是什麼"></a>this 是什麼</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<p>直接印出<code>this</code>是<code>Global</code>物件，瀏覽器裡就是<code>Window</code><br>為方便以下統稱<code>Window</code></p>
<h1 id="在一般函式裡"><a href="#在一般函式裡" class="headerlink" title="在一般函式裡"></a>在一般函式裡</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Q: 請問這個<code>this</code>是什麼?</p>
<p>A: <strong>不知道</strong></p>
<p>就是不知道!<br>因為…</p>
<blockquote>
<p>函式裡的<code>this</code>是取決的函式是怎麼執行的</p>
</blockquote>
<h2 id="1-直接執行函式"><a href="#1-直接執行函式" class="headerlink" title="1. 直接執行函式"></a>1. 直接執行函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a(); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure>

<p>this是Window</p>
<h2 id="2-作為物件的成員函式執行"><a href="#2-作為物件的成員函式執行" class="headerlink" title="2. 作為物件的成員函式執行"></a>2. 作為物件的成員函式執行</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'object'</span>,</span><br><span class="line">  a() &#123;</span><br><span class="line">    conosle.log(<span class="keyword">this</span>)<span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">// obj</span></span><br></pre></td></tr></table></figure>

<p>this是該物件</p>
<p>那這樣呢?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = obj.a;</span><br><span class="line">b(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<p>這就會回到第一個分類<code>直接執行函式</code>，<code>this</code>是<code>Window</code></p>
<h2 id="3-作為-DOM-事件偵聽函式"><a href="#3-作為-DOM-事件偵聽函式" class="headerlink" title="3. 作為 DOM 事件偵聽函式"></a>3. 作為 DOM 事件偵聽函式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,a); <span class="comment">// DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<p>this是該 DOM本身</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">x.addEventListener(<span class="string">'loaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//不一定</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>作為非DOM的偵聽，this是不一定</p>
<h2 id="4-作為建構函式"><a href="#4-作為建構函式" class="headerlink" title="4. 作為建構函式"></a>4. 作為建構函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// A&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>this是建構出來的實例</p>
<h2 id="小測驗"><a href="#小測驗" class="headerlink" title="小測驗"></a>小測驗</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = a();</span><br><span class="line"></span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A: obj，作為obj的成員執行</font></p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A: Window，b是直接執行的</font></p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;a&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, obj.a);</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  DOM元素 <button id='btn'>btn</button></font></p>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b()&#123;</span><br><span class="line">    reurn <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      a();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, obj.b());</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  Window, a函式是直接執行的</font></p>
<h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b()&#123;</span><br><span class="line">    reurn <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, obj.b());</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  DOM元素 <button id='btn'>btn</button></font></p>
<h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a()&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, obj.a());</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  DOM元素 <button id='btn'>btn</button></font></p>
<h1 id="ES6箭頭函式裡"><a href="#ES6箭頭函式裡" class="headerlink" title="ES6箭頭函式裡"></a>ES6箭頭函式裡</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭頭函式內的this，永遠等於箭頭函式外的this。</p>
</blockquote>
<p>也有人說箭頭函式在宣告時，this就決定了。</p>
<h2 id="小測驗-1"><a href="#小測驗-1" class="headerlink" title="小測驗:"></a>小測驗:</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, a);</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  Window</font></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  Window</font></p>
<h3 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ?  </span></span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, a);</span><br></pre></td></tr></table></figure>

<p>反白看答案 =&gt; <font color= "white">A:  DOM元素 <button id='btn'>btn</button></font></p>
<h1 id="bind-apply-call的this"><a href="#bind-apply-call的this" class="headerlink" title="bind/apply/call的this"></a>bind/apply/call的this</h1><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>強制把函式裡的this綁訂到目標物上，產生新的函式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&#39;btn&#39;&gt;btn&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  conosle.log(<span class="keyword">this</span>); <span class="comment">//?</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = a.bind(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, b);</span><br></pre></td></tr></table></figure>

<p><code>this</code>是 <code>Number{0}</code></p>
<p>如果是這樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = a.bind(obj);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, b);</span><br></pre></td></tr></table></figure>

<p><code>this</code>是 <code>obj</code></p>
<p>必須留意的是，被<code>bind</code>綁訂的函式會創造出一個新的函式</p>
<blockquote>
<p>a跟b是不同的函式，但他們內容是一樣的</p>
</blockquote>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`htmlembedded=</span></span><br><span class="line"><span class="string">&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Number&#123;0&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(x + y); <span class="comment">// 10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, b);</span><br></pre></td></tr></table></figure>

<p><code>bind</code>也可以綁訂參數</p>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>跟<code>bind</code>有點像，但他是綁訂後直接執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// obj</span></span><br><span class="line">  <span class="built_in">console</span>.log(x + y); <span class="comment">//7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">add.apply(obj, [<span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>跟<code>apply</code>一樣，接受參數方式不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// obj</span></span><br><span class="line">  <span class="built_in">console</span>.log(x + y); <span class="comment">//7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">add.call(obj, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 這裡不用寫成陣列</span></span><br></pre></td></tr></table></figure>

<h2 id="綁訂箭頭函式"><a href="#綁訂箭頭函式" class="headerlink" title="綁訂箭頭函式"></a>綁訂箭頭函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`htmlembedded=</span></span><br><span class="line"><span class="string">&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cosnt add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">  <span class="built_in">console</span>.log(x + y); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(obj, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b();</span><br><span class="line">add.apply(obj, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">add.call(obj, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>以上執行的都是<code>Window</code><br>說明bind/apply/call對箭頭函式是無效的</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.facebook.com/hilivecode/videos/190238981712769" target="_blank" rel="noopener">一次搞懂 JavaScript 的 #this、this 還有那個 this</a><br>以上筆記紀錄影片中的大部分的<code>this</code>，影片有提到Vue的<code>this</code>，有興趣看完整版點去看。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>奇怪部分</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>比較乾淨的JaveScript</title>
    <url>/2021/11/17/clean-code/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/rccj/images/master/blog/clean-code-00.png" alt="clean soap" style="zoom:50%;" />

<p><a href="https://www.alexfediuc.com/content/images/2021/01/CleanCodeSoap.png" target="_blank" rel="noopener">圖片來源</a></p>
<a id="more"></a>

<h1 id="1-有意義的命名"><a href="#1-有意義的命名" class="headerlink" title="1.有意義的命名"></a>1.有意義的命名</h1><h2 id="變數與函式命名"><a href="#變數與函式命名" class="headerlink" title="變數與函式命名"></a>變數與函式命名</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌ </span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'Roman'</span>;</span><br><span class="line"><span class="keyword">const</span> abc = <span class="string">'Chen'</span></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="string">'roman0507@gmail.com'</span></span><br><span class="line"><span class="keyword">const</span> user = [<span class="string">'Roman'</span>,<span class="string">'Corgi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Roman'</span>;</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="string">'Chen'</span></span><br><span class="line"><span class="keyword">const</span> email = <span class="string">'roman0507@gmail.com'</span></span><br><span class="line"><span class="keyword">const</span> users = [<span class="string">'Roman'</span>,<span class="string">'Corgi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitUserForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有意義且駝峰大小寫</p>
<h2 id="布林變數"><a href="#布林變數" class="headerlink" title="布林變數"></a>布林變數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌  </span></span><br><span class="line"><span class="keyword">let</span> active = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> subscribe = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> linkedAccount = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">let</span> isActive = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> didSubscribe = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> hasLinkedAccount = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>會加入形容動作</p>
<h2 id="重複的詞彙"><a href="#重複的詞彙" class="headerlink" title="重複的詞彙"></a>重複的詞彙</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌   </span></span><br><span class="line"><span class="keyword">const</span> user &#123;</span><br><span class="line">  userName: <span class="string">'Roman'</span>,</span><br><span class="line">  userLastName = <span class="string">'Chen'</span></span><br><span class="line">  userEmail = <span class="string">'roman0507@gmail.com'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> user &#123;</span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  lastName = <span class="string">'Chen'</span></span><br><span class="line">  email = <span class="string">'roman0507@gmail.com'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="有意義的常數"><a href="#有意義的常數" class="headerlink" title="有意義的常數"></a>有意義的常數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line">setTimeout(clearSessionData, <span class="number">900000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> SESSION_DURATION_MS = <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">setTimeout(clearSessionData, SESSION_DURATION_MS);</span><br></pre></td></tr></table></figure>
<p>全域性常量可以採用<code>SCREAMING_SNAKE_CASE</code>風格命名。</p>
<h1 id="2-簡單函式"><a href="#2-簡單函式" class="headerlink" title="2. 簡單函式"></a>2. 簡單函式</h1><h2 id="預設值當參數"><a href="#預設值當參數" class="headerlink" title="預設值當參數"></a>預設值當參數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌ </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapSlogan</span> (<span class="params">slogan</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  arr[<span class="number">0</span>] = slogan || <span class="string">'-'</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapSlogan</span> (<span class="params">slogan = <span class="string">'-'</span></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  arr[<span class="number">0</span>] = slogan;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="避免重複的事"><a href="#避免重複的事" class="headerlink" title="避免重複的事"></a>避免重複的事</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderCarsList</span>(<span class="params">cars</span>) </span>&#123;</span><br><span class="line">  cars.forEach(<span class="function">(<span class="params">car</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> price = car.getPrice();</span><br><span class="line">    <span class="keyword">const</span> make = car.getMake();</span><br><span class="line">    <span class="keyword">const</span> brand = car.getBrand();</span><br><span class="line">    <span class="keyword">const</span> nbOfDoors = car.getNbOfDoors();</span><br><span class="line"></span><br><span class="line">    render(&#123; price, make, brand, nbOfDoors &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderMotorcyclesList</span>(<span class="params">motorcycles</span>) </span>&#123;</span><br><span class="line">  motorcycles.forEach(<span class="function">(<span class="params">motorcycle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> price = motorcycle.getPrice();</span><br><span class="line">    <span class="keyword">const</span> make = motorcycle.getMake();</span><br><span class="line">    <span class="keyword">const</span> brand = motorcycle.getBrand();</span><br><span class="line">    <span class="keyword">const</span> seatHeight = motorcycle.getSeatHeight();</span><br><span class="line"></span><br><span class="line">    render(&#123; price, make, brand, nbOfDoors &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderVehiclesList</span>(<span class="params">vehicles</span>) </span>&#123;</span><br><span class="line">  vehicles.forEach(<span class="function">(<span class="params">vehicle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> price = vehicle.getPrice();</span><br><span class="line">    <span class="keyword">const</span> make = vehicle.getMake();</span><br><span class="line">    <span class="keyword">const</span> brand = vehicle.getBrand();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123; price, make, brand &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (vehicle.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">        data.nbOfDoors = vehicle.getNbOfDoors();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"motorcycle"</span>:</span><br><span class="line">        data.seatHeight = vehicle.getSeatHeight();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看起來有相似的功能就可以併起來，避免重複做一樣的事情</p>
<h2 id="一次一件事"><a href="#一次一件事" class="headerlink" title="一次一件事"></a>一次一件事</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pingUsers</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  users.forEach(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userRecord = database.lookup(user);</span><br><span class="line">    <span class="keyword">if</span> (!userRecord.isActive()) &#123;</span><br><span class="line">      ping(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pingInactiveUsers</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  users.filter(!isUserActive).forEach(ping);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserActive</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> userRecord = database.lookup(user);</span><br><span class="line">  <span class="keyword">return</span> userRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在同個函式裡做太多不同的事，會導致可讀性變差。</p>
<h2 id="避免過多的參數"><a href="#避免過多的參數" class="headerlink" title="避免過多的參數"></a>避免過多的參數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateUser</span> (<span class="params">name, age, isMember</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">validateUser(<span class="string">"Roman"</span>, <span class="number">18</span>, <span class="literal">true</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"Roman"</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  isMember: <span class="literal">true</span>,</span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateUser</span> (<span class="params">&#123;name, age, isMember&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">validateUser(user)</span><br></pre></td></tr></table></figure>
<p>某些情況下可直接引入物件並直接<code>解構賦值</code>，可避免過多的參數</p>
<h2 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="string">"21-8-2021"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoDayMonthYear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  date = date.split(<span class="string">"-"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoDayMonthYear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another function could be expecting date as a string</span></span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// ['21', '8', '2021'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoDayMonthYear</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> date.split(<span class="string">"-"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="string">"21-8-2021"</span>;</span><br><span class="line"><span class="keyword">const</span> newDate = splitIntoDayMonthYear(date);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original vlaue is intact</span></span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// '21-8-2021';</span></span><br><span class="line"><span class="built_in">console</span>.log(newDate); <span class="comment">// ['21', '8', '2021'];</span></span><br></pre></td></tr></table></figure>
<p>大多數情況下都應該保持純函式。副作用可能會修改共享狀態和資源，導致一些奇怪的問題。</p>
<h2 id="避免使用布林標誌作為參數"><a href="#避免使用布林標誌作為參數" class="headerlink" title="避免使用布林標誌作為參數"></a>避免使用布林標誌作為參數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name, isPublic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isPublic) &#123;</span><br><span class="line">    fs.create(<span class="string">`./public/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPublicFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./public/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函式含有布林值的參數意味這個函式是可以被簡化的。</p>
<h2 id="Promise-aysnc-awit-處理非同步"><a href="#Promise-aysnc-awit-處理非同步" class="headerlink" title="Promise aysnc awit 處理非同步"></a>Promise aysnc awit 處理非同步</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line">getUser(<span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">  getProfile(user, <span class="function"><span class="keyword">function</span> (<span class="params">err, profile</span>) </span>&#123;</span><br><span class="line">    getAccount(profile, <span class="function"><span class="keyword">function</span> (<span class="params">err, account</span>) </span>&#123;</span><br><span class="line">      getReports(account, <span class="function"><span class="keyword">function</span> (<span class="params">err, reports</span>) </span>&#123;</span><br><span class="line">        sendStatistics(reports, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line">getUser()</span><br><span class="line">  .then(getProfile)</span><br><span class="line">  .then(getAccount)</span><br><span class="line">  .then(getReports)</span><br><span class="line">  .then(sendStatistics)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// or using Async/Await </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendUserStatistics</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line">    <span class="keyword">const</span> profile = <span class="keyword">await</span> getProfile(user);</span><br><span class="line">    <span class="keyword">const</span> account = <span class="keyword">await</span> getAccount(profile);</span><br><span class="line">    <span class="keyword">const</span> reports = <span class="keyword">await</span> getReports(account);</span><br><span class="line">    <span class="keyword">return</span> sendStatistics(reports);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>callback hell</code>是很可怕的</p>
<h1 id="3-條件語句"><a href="#3-條件語句" class="headerlink" title="3. 條件語句"></a>3. 條件語句</h1><h2 id="使用非負條件"><a href="#使用非負條件" class="headerlink" title="使用非負條件"></a>使用非負條件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserNotVerified</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isUserNotVerified(user)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserVerified</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isUserVerified(user)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="某些判斷可簡寫"><a href="#某些判斷可簡寫" class="headerlink" title="某些判斷可簡寫"></a>某些判斷可簡寫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't</span></span><br><span class="line"><span class="keyword">if</span> (isActive === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstName !== <span class="string">""</span> &amp;&amp; firstName !== <span class="literal">null</span> &amp;&amp; firstName !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isUserEligible = user.isVerified() &amp;&amp; user.didSubscribe() ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="keyword">if</span> (isActive) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!!firstName) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isUserEligible = user.isVerified() &amp;&amp; user.didSubscribe();</span><br></pre></td></tr></table></figure>
<h2 id="if-else避免過多分支"><a href="#if-else避免過多分支" class="headerlink" title="if else避免過多分支"></a>if else避免過多分支</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUserService</span>(<span class="params">db, user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!db) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!db.isConnected()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="keyword">return</span> db.insert(<span class="string">"users"</span>, user);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No user"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No database connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No database"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUserService</span>(<span class="params">db, user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!db) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No database"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!db.isConnected()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No database connection"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No user"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> db.insert(<span class="string">"users"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>儘早<code>return</code>會使你的程式碼線性化、更具可讀性且不那麼複雜。</p>
<h2 id="優先使用-map-而不是-switch-語句"><a href="#優先使用-map-而不是-switch-語句" class="headerlink" title="優先使用 map 而不是 switch 語句"></a>優先使用 map 而不是 switch 語句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="keyword">const</span> getColorByStatus = <span class="function">(<span class="params">status</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"success"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"green"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"failure"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"red"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"warning"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"yellow"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"loading"</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"blue"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> statusColors = &#123;</span><br><span class="line">  success: <span class="string">"green"</span>,</span><br><span class="line">  failure: <span class="string">"red"</span>,</span><br><span class="line">  warning: <span class="string">"yellow"</span>,</span><br><span class="line">  loading: <span class="string">"blue"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getColorByStatus = <span class="function">(<span class="params">status</span>) =&gt;</span> statusColors[status] || <span class="string">"blue"</span>;</span><br></pre></td></tr></table></figure>
<p>減少複雜度且提升效能。</p>
<h2 id="只有if的話"><a href="#只有if的話" class="headerlink" title="只有if的話"></a>只有if的話</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌ </span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">✔️ <span class="comment">// Do </span></span><br><span class="line">foo &amp;&amp; doSomething();</span><br></pre></td></tr></table></figure>
<h2 id="善用三元表達式"><a href="#善用三元表達式" class="headerlink" title="善用三元表達式"></a>善用三元表達式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFee</span>(<span class="params">isMember</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isMember)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'$2.00'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'$10.00'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFee</span>(<span class="params">isMember</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isMember ? <span class="string">'$2.00'</span> : <span class="string">'$10.00'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">…</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition1) &#123; <span class="keyword">return</span> value1; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123; <span class="keyword">return</span> value2; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (condition3) &#123; <span class="keyword">return</span> value3; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> value4; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Equivalent to:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">…</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> condition1 ? value1</span><br><span class="line">         : condition2 ? value2</span><br><span class="line">         : condition3 ? value3</span><br><span class="line">         : value4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有很多else if，可考慮改成三元表達式</p>
<h2 id="三元好棒，但不要走火入魔"><a href="#三元好棒，但不要走火入魔" class="headerlink" title="三元好棒，但不要走火入魔"></a>三元好棒，但不要走火入魔</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line">    width = container &gt; <span class="number">960</span> ? (growWithContainer ? (container * <span class="number">.8</span>) : <span class="number">960</span>) : container;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">if</span> (container &gt; <span class="number">960</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (growWithContainer) &#123;</span><br><span class="line">    width = container * <span class="number">.8</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    width = <span class="number">960</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  width = container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有時不是寫得越短越好，有些比較複雜的邏輯不用硬要追求很短，<br>一般來說寫的越好的Code，通常越好維護</p>
<h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="解構賦值"><a href="#解構賦值" class="headerlink" title="解構賦值"></a>解構賦值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="keyword">const</span> name = user.name;</span><br><span class="line"><span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"><span class="keyword">const</span> email = user.email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> b = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, lastName, email&#125; = user;</span><br><span class="line"><span class="keyword">const</span> [a, b] = arr;</span><br></pre></td></tr></table></figure>

<h2 id="把0縮寫"><a href="#把0縮寫" class="headerlink" title="把0縮寫"></a>把0縮寫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="keyword">const</span> SALARY = <span class="number">150000000</span>,</span><br><span class="line">TAX = <span class="number">15000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="keyword">const</span> SALARY = <span class="number">15e7</span>,</span><br><span class="line">TAX = <span class="number">15e6</span>;</span><br></pre></td></tr></table></figure>
<h2 id="避免過多的註解"><a href="#避免過多的註解" class="headerlink" title="避免過多的註解"></a>避免過多的註解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don't ❌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateHash</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Hash variable</span></span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the length of the string</span></span><br><span class="line">  <span class="keyword">let</span> length = str.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the string is empty return</span></span><br><span class="line">  <span class="keyword">if</span> (!length) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop through every character in the string</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// Get character code.</span></span><br><span class="line">    <span class="keyword">const</span> char = str.charCodeAt(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the hash</span></span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">5</span>) - hash + char;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash &amp;= hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do ✔️</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateHash</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> length = str.length;</span><br><span class="line">  <span class="keyword">if</span> (!length) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> char = str.charCodeAt(i);</span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">5</span>) - hash + char;</span><br><span class="line">    hash = hash &amp; hash; <span class="comment">// Convert to 32bit integer</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有人說<code>最乾淨的code就是不下註解</code>。<br>遵守<code>有意義的命名</code>，只註解複雜的程式邏輯。</p>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>不是說一定怎麼寫會比較好，但前人的經驗告訴我們，在一般的情況下遵從以上的原則，可以提升程式碼的可讀性，更好維護。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.gushiciku.cn/pl/goEI/zh-tw" target="_blank" rel="noopener">如何寫出乾淨的 JavaScript 程式碼</a><br><a href="https://javascript.plainenglish.io/5-best-practices-for-writing-clean-javascript-be366adb2859" target="_blank" rel="noopener">5 Best Practices for Writing Clean JavaScript</a><br><a href="https://dev.to/redbossrabbit/10-clean-code-examples-javascript-37kj" target="_blank" rel="noopener">10 Clean code examples (Javascript).</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JS基本功</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>原型Prototype: [].map的map是哪來的?</title>
    <url>/2021/11/14/prototype-map/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-00.png" alt="prototype-01" style="zoom:50%;" />

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前剛接觸到陣列map的時候，覺得很開心不用一直寫for迴圈，但我師父問起：你知道怎麼會有這個嗎?<br>然後就開始解釋起原型鏈這可怕的東西了…<br>在這裡只會提到原型繼承的概念，並不會挖太深。</p>
<a id="more"></a>

<h1 id="先說結論"><a href="#先說結論" class="headerlink" title="先說結論"></a>先說結論</h1><p>在創立陣列時，它指向的原型，已經把所有陣列的方法，透過原型鏈繼承傳給它，即使在陣列本身看不到，但在他的骨子裡，沿著它的根尋找，就存在著這些方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [1,2,3];</span><br><span class="line"></span><br><span class="line">arr.map(x &#x3D;&gt; x + 1) &#x2F;&#x2F; [2,3,4]</span><br><span class="line">arr.filter(x &#x3D;&gt; x &gt; 1) &#x2F;&#x2F; [2,3]</span><br><span class="line">arr.length &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-01.png" alt="prototype-01" style="zoom:50%;" />

<p>不只是map，還有許多方便的方法，在建立物件的時候，就跟著<strong>繼承</strong>下來了</p>
<h1 id="函式建構子-Function-constructor"><a href="#函式建構子-Function-constructor" class="headerlink" title="函式建構子 Function constructor"></a>函式建構子 Function constructor</h1><p>從建立一個物件開始吧！</p>
<p>如果我今天要建造一個人？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person &#x3D; &#123;</span><br><span class="line">  name: &#39;Roman&#39;,</span><br><span class="line">  description: &#39;Cool&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用<code>物件實體法</code>也是最主流的方式，宣告一個人很酷的人做Roman。</p>
<p>但如果今天我需要快速得到很多不同名字的人呢?</p>
<h2 id="函式回傳物件"><a href="#函式回傳物件" class="headerlink" title="函式回傳物件"></a>函式回傳物件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPerson (name, description) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    description: description</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var roman &#x3D; getPerson(&#39;Roman&#39;, &#39;Cool&#39;);</span><br><span class="line">var corgi &#x3D; getPerson(&#39;Corgi&#39;, &#39;Cute&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-02.png" alt="prototype-02" style="zoom:50%;" />

<p>目前為止沒什麼問題，但有點囉嗦。如果早知道要建立物件的話，又何必要建立新物件再回傳呢？也為了往後其他目的，JavaScript 透過函式建構子提供了方便的捷徑。</p>
<h2 id="函式建構子"><a href="#函式建構子" class="headerlink" title="函式建構子"></a>函式建構子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person (name, description) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  this.description &#x3D; description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var roman &#x3D; new Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br><span class="line">var corgi &#x3D; new Person(&#39;Corgi&#39;, &#39;Cute&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-02.png" alt="prototype-02" style="zoom:50%;" />

<blockquote>
<p>函式建構子名稱往往以大寫起頭，可方便你在程式碼中找出函式建構子或誤用。</p>
</blockquote>
<p>一個是呼叫執行函式並將結果指向變數roman，一個是用new建立物件並指向變數roman;</p>
<h2 id="當使用new時背後發生什麼事"><a href="#當使用new時背後發生什麼事" class="headerlink" title="當使用new時背後發生什麼事 ?"></a>當使用new時背後發生什麼事 ?</h2><ol>
<li>JS直譯器<code>syantax parsor</code>會先建立一個空物件{}。</li>
<li>接著呼叫new後面的函式建構子，當函式被呼叫時，創造函式執行環境 <code>Excusion</code> <code>content</code>，<code>this</code>關鍵字也隨之被創造出來。</li>
<li>由於<code>this</code>被寫在<code>new</code>的後面，JS直譯器知道你在用<code>函式建構子</code>創造物件，因此<code>this</code>指向了剛被創造出來的空物件{}，所以<code>函式建構子</code>內的<code>this.xxx</code>被創造在這個空物件中。</li>
</ol>
<blockquote>
<p>new會改變this的對象(原指向全域物件)</p>
</blockquote>
<h2 id="在函式建構子中-return"><a href="#在函式建構子中-return" class="headerlink" title="在函式建構子中 return"></a>在函式建構子中 return</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person (name, description) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.description &#x3D; description;</span><br><span class="line">    return &#39;this is return value&#39;;</span><br><span class="line">&#125;</span><br><span class="line">var roman &#x3D; new Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-03.png" alt="prototype-03" style="zoom:50%;" />

<p>回傳字串不會受影響</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person (name, description) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.description &#x3D; description;</span><br><span class="line">    return &#123;name: &#39;No corgi anymore&#39;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">var corgi &#x3D; new Person(&#39;Corgi&#39;, &#39;Cute&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-04.png" alt="prototype-04" style="zoom:50%;" />

<p>回傳物件會把創立的新物件覆蓋掉</p>
<h2 id="別忘記new"><a href="#別忘記new" class="headerlink" title="別忘記new"></a>別忘記new</h2><p>若使用使用函數建構子不用new，就會變成一般的呼叫函式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var roman &#x3D; new Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br><span class="line">var roman &#x3D; Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br></pre></td></tr></table></figure>

<h1 id="Prototype-原型"><a href="#Prototype-原型" class="headerlink" title="Prototype 原型"></a>Prototype 原型</h1><h2 id="重複用的函式"><a href="#重複用的函式" class="headerlink" title="重複用的函式"></a>重複用的函式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person (name, description) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  this.description &#x3D; description;</span><br><span class="line">  this.greeting &#x3D; function()&#123;</span><br><span class="line">     return &quot;Hi, I&#39;m &quot; + this.name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var roman &#x3D; new Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br><span class="line">var corgi &#x3D; new Person(&#39;Corgi&#39;, &#39;Cute&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-05.png" alt="prototype-06" style="zoom:50%;" />

<p>我加了一個打招呼的方法，在新創建的物件都使用這個方法</p>
<p>假設每個新創立的物件都會用到<code>greeting</code></p>
<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-06.png" alt="prototype-06" style="zoom:50%;" />

<p>從圖中可以看到，看起來是同樣的函示，但事實是greeting分別存在兩個新建立的物件。</p>
<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-07.png" alt="prototype-07" style="zoom:50%;" />

<blockquote>
<p>說明如果我建立10個新物件，就會多10個存放greeting的空間。</p>
</blockquote>
<blockquote>
<p>如果不是每個新物件都需要用到，就等於某些物件多建立了<code>greeting</code></p>
</blockquote>
<p>浪費空間耗能。</p>
<h2 id="放在工具包（繼承）"><a href="#放在工具包（繼承）" class="headerlink" title="放在工具包（繼承）"></a>放在工具包（繼承）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person (name, description) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">  this.description &#x3D; description;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.greeting &#x3D; function()&#123;</span><br><span class="line">  return &quot;Hi, I&#39;m &quot; + this.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var roman &#x3D; new Person(&#39;Roman&#39;, &#39;Cool&#39;);</span><br><span class="line">var corgi &#x3D; new Person(&#39;Corgi&#39;, &#39;Cute&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-05.png" alt="prototype-05" style="zoom:50%;" />

<p><code>Person</code>的<code>prototype</code>屬性，可以把它想成是<code>Person</code>的工具包，每個function都有的屬性，被創立出來時是空的，可以使用<code>prototype</code>幫這個物件（工具包）擴充。</p>
<img src="https://github.com/rccj/images/blob/master/blog/prototype-08.png?raw=true" alt="prototype-08.png" style="zoom:50%;" />

<p>而用<code>new</code>創建新的<code>Person</code>時，會把它繼承過去，物件本體雖然沒有這個<code>greeting</code>，但沿著工具包找是可以取用到的。</p>
<img src="https://github.com/rccj/images/blob/master/blog/prototype-09.png?raw=true" alt="prototype-09.png" style="zoom:50%;" />

<blockquote>
<p>兩個物件的<code>greeting</code>都指向同一個參考物件，記憶體上是同一個</p>
</blockquote>
<h1 id="所以說那個map呢？"><a href="#所以說那個map呢？" class="headerlink" title="所以說那個map呢？"></a>所以說那個map呢？</h1><p>有了剛剛那些概念，現在談談當我們宣告一個陣列時，發生的事情</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [1,2,3];</span><br></pre></td></tr></table></figure>

<p>當我今天宣告一個陣列時，其實就把<code>當使用new時背後發生什麼事 ?</code>提到的事情做完了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [1,2,3];</span><br><span class="line">&#x2F;&#x2F; 等於下面這個</span><br><span class="line">var arr &#x3D; new Array(1,2,3);</span><br></pre></td></tr></table></figure>

<ol>
<li>宣告創造一個新的空陣列物件</li>
<li>將建構子的this指向過去</li>
<li>把工具包也傳承下去（但不存在陣列本體）</li>
</ol>
<p>所以就有了開頭這張圖</p>
<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-01.png" alt="prototype-01" style="zoom:50%;" />

<blockquote>
<p>陣列也算是物件的一種’</p>
</blockquote>
<img src="https://raw.githubusercontent.com/rccj/images/master/blog/prototype-010.png" alt="prototype-010" style="zoom:50%;" />

<p>驗證</p>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這篇本來是想把原型的都寫完，但秉持著每篇文章儘可能淺顯易懂，儘可能不要有太多的延伸討論，不要偏離標題太多，先簡述概念，之後在陸續把原型的理論補齊。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://maxleebk.com/2020/07/25/prototype/" target="_blank" rel="noopener">Max’s Blog: 面試官最愛考的 JS 原型鏈</a><br><a href="https://ithelp.ithome.com.tw/articles/10194350" target="_blank" rel="noopener">SimonAllen: 古典與原型繼承、瞭解原型</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">MDN: 繼承與原型鏈</a><br><a href="https://cythilya.github.io/2018/10/26/prototype/" target="_blank" rel="noopener">Summer: 你懂 JavaScript 嗎？#19 原型（Prototype）</a><br><a href="https://blog.techbridge.cc/2017/04/22/javascript-prototype/" target="_blank" rel="noopener">huli: 該來理解 JavaScript 的原型鍊了</a><br><a href="https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html" target="_blank" rel="noopener">[筆記] 談談 JavaScript 中的 function constructor 和關鍵字 new</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_JS" target="_blank" rel="noopener">MDN: 初學者應知道的物件導向 JavaScript</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>奇怪部分</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型繼承</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP概念入門</title>
    <url>/2021/10/28/http-intro/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro.jpg" alt="http-intor"></p>
<center>(圖片來源: 網路)</center>

<p>你常看到，但你可能不知道…</p>
<a id="more"></a>

<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul>
<li><strong>超文本傳輸協定</strong> 英語：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，縮寫：<strong>HTTP</strong>。</li>
<li>電腦間在網路上溝通的一種方式，主要用在網頁上。</li>
</ul>
<h1 id="電腦間的溝通"><a href="#電腦間的溝通" class="headerlink" title="電腦間的溝通"></a>電腦間的溝通</h1><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro-002.gif" alt="http-intor-002"></p>
<p>我們最常看到HTTP的地方就是的網址。<br>當我們打完網址按下Enter後，就開始電腦間的溝通…</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro-001.png" alt="http-intor-001"></p>
<ol>
<li><p>輸入網址 （<a href="https://www.google.com/）" target="_blank" rel="noopener">https://www.google.com/）</a><br>瀏覽器會解析 https://之後的東西 =&gt; <strong><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></strong> ，找出他的IP位置在哪，去做訪問</p>
</li>
<li><p>發出請求 Request<br>告訴伺服器說，我到這個電腦(伺服器)，請把的檔案回傳給我們</p>
</li>
<li><p>給予回應 Response （顯示頁面）<br>解析之後，就會跑出我們看到的畫面</p>
</li>
</ol>
<p>這就是電腦跟電腦(伺服器)在網路上溝通做的事情，<strong>請求</strong>與<strong>回應</strong></p>
<p>概略講起來是很簡單，但中間做了很多事。</p>
<h1 id="除了打網址的溝通"><a href="#除了打網址的溝通" class="headerlink" title="除了打網址的溝通"></a>除了打網址的溝通</h1><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro-004.png" alt="http-intro-004" style="zoom:50%;" />

<p>今天在Facebook發文，點下Post(發佈)後，頁面就多了一則貼文。</p>
<p>透過電腦發送了一個請求到伺服器，伺服器收到後，新增一則貼文在我的頁面上，同時回覆我給成功或是失敗，完成這個發佈貼文的動作。</p>
<p>但我們沒有在貼文中的按鈕看到任何網址，他只是存在於程式中，</p>
<p>這個<strong>請求</strong>可能長這樣 <a href="http://api.facebook.com/postsomething" target="_blank" rel="noopener">http://api.facebook.com/postsomething</a></p>
<p>找到了地址，告訴他說要做什麼事情</p>
<ul>
<li>請求 =&gt; Loading (發出請求給伺服器，我要新增貼文)</li>
<li>回應 =&gt; 新增貼文成功 (顯示最新的貼文)</li>
<li>或是 =&gt; 新增貼文失敗 </li>
</ul>
<blockquote>
<p>在網頁的所有操作都有可能用到HTTP做溝通</p>
</blockquote>
<h1 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h1><p><strong>最常見的5個HTTP方法</strong></p>
<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">說明</th>
<th align="center">舉例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">拿取資料</td>
<td align="center">輸入網址取得網站</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">上傳資料</td>
<td align="center">發佈貼文</td>
</tr>
<tr>
<td align="center">PUT</td>
<td align="center">覆蓋資料</td>
<td align="center">更換大頭貼</td>
</tr>
<tr>
<td align="center">PATCH</td>
<td align="center">更新資料</td>
<td align="center">編輯貼文</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">刪除資料</td>
<td align="center">刪除資料</td>
</tr>
</tbody></table>
<p>根據請求目的地不同會有不同的方法</p>
<h1 id="溝通格式"><a href="#溝通格式" class="headerlink" title="溝通格式"></a>溝通格式</h1><p>HTTP溝通就像是寫信、寄信，也存在著溝通的格式。<br>必須照規矩來才讓電腦順利溝通。</p>
<p>以下以買東西舉例</p>
<h2 id="請求-request-回應-response"><a href="#請求-request-回應-response" class="headerlink" title="請求 request 回應 response"></a>請求 request 回應 response</h2><p>想像成寫信，會分成大概三個區塊</p>
<ul>
<li><p>start line HTTP 版本和方法跟網址路徑<br>POST /card HTTP/1.1</p>
</li>
<li><p>header    關於請求/回應的資訊 ex: 哪裡發送的、資料類型<br>Host: api.shop.com<br>Uesr-Agent: Mozolla/5.0 (windows…) Chrome<br>Accept: text/plain<br>Content-Type: text/plain<br>Content-Length: 43</p>
</li>
<li><p>body       發送/回應的內容<br>{“card”: 1234567890, “total_price”: 1000}</p>
</li>
</ul>
<h2 id="HTTP-Status-Code"><a href="#HTTP-Status-Code" class="headerlink" title="HTTP Status Code"></a>HTTP Status Code</h2><p>當發出請求後，在回應得內容中，包含狀態碼</p>
<p>狀態碼不同數字區間代表者不同意思</p>
<ul>
<li><p>1xx : 訊息<br>請求已被伺服器接收，繼續處理</p>
</li>
<li><p>2xx : 成功<br>請求已成功被伺服器接收、理解、並接受</p>
</li>
<li><p>3xx : 重新導向<br>需要後續操作才能完成這一請求 （重新定向 轉址）</p>
</li>
<li><p>4xx : 客戶端錯誤<br>請求含有詞法錯誤或者無法被執行</p>
</li>
<li><p>5xx : 伺服器錯誤<br>伺服器在處理某個正確請求時發生錯誤</p>
</li>
</ul>
<p>你可能有看過類似的畫面，經典的404。</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro-005.png" alt="http-intro-005"></p>
<p>雖然 <a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC 2616</a> 中已經推薦了描述狀態的短語，例如”200 OK”，”<a href="https://zh.wikipedia.org/wiki/HTTP_404" target="_blank" rel="noopener">404 Not Found</a>“，但是WEB開發者仍然能夠自行決定採用何種短語，用以顯示在地化的狀態描述或者自訂訊息。</p>
<p>更多的狀態碼可以點<a href="https://www.ifreesite.com/http-status-codes.htm" target="_blank" rel="noopener">這裡</a></p>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><ul>
<li><strong>超文本傳輸安全協定</strong> 英語：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol <strong>S</strong>ecure，縮寫：<strong>HTTPS</strong></li>
<li>利用SSL/TLS封包加密</li>
</ul>
<p>透過加密技術，讓請求或回應時的資料多了一層保護，讓第三方沒那麼容易盜取。</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/http-intro-006.png" alt="http-intro-006"></p>
<p><a href="https://www.tutorialsmate.com/2020/07/http-vs-https.html" target="_blank" rel="noopener">圖片來源</a></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">維基百科: 超文本傳輸協定</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=-tRp1IOlKkI&t=162s" target="_blank" rel="noopener">GrandmaCan -我阿嬤都會: 什麼是 HTTP、HTTPS </a><br>主講者小白講的淺顯易懂，非常適合剛入門的人</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 常用語法</title>
    <url>/2021/10/27/markdown/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/rccj/images/master/blog/markdown.png" alt="markdown" style="zoom:50%;" />

<a id="more"></a>

<h1 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br></pre></td></tr></table></figure>

<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><h1 id="字體"><a href="#字體" class="headerlink" title="字體"></a>字體</h1><h2 id="粗體"><a href="#粗體" class="headerlink" title="粗體"></a>粗體</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**bold** __bold__</span><br></pre></td></tr></table></figure>
<p><strong>bold</strong> </p>
<h2 id="斜體"><a href="#斜體" class="headerlink" title="斜體"></a>斜體</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_Itaclic_</span><br></pre></td></tr></table></figure>
<p><em>Itaclic</em></p>
<h2 id="粗斜體"><a href="#粗斜體" class="headerlink" title="粗斜體"></a>粗斜體</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***bold italic***</span><br></pre></td></tr></table></figure>
<p><strong><em>bold italic</em></strong></p>
<h2 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~Strikethrough~~</span><br></pre></td></tr></table></figure>
<p><del>Strikethrough</del></p>
<h1 id="超連結"><a href="#超連結" class="headerlink" title="超連結"></a>超連結</h1><h2 id="一般連結"><a href="#一般連結" class="headerlink" title="一般連結"></a>一般連結</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;google.com&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a></p>
<h2 id="有標題的連結"><a href="#有標題的連結" class="headerlink" title="有標題的連結"></a>有標題的連結</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[連結](http:&#x2F;&#x2F;google.com&#x2F; &quot;Title&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="http://google.com/" target="_blank" rel="noopener" title="Title">連結</a></p>
<h2 id="有標題的照片"><a href="#有標題的照片" class="headerlink" title="有標題的照片"></a>有標題的照片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text](https:&#x2F;&#x2F;api.fnkr.net&#x2F;testimg&#x2F;200x200&#x2F;2A353A&#x2F;FFF&#x2F;?text&#x3D;img &quot;title&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="https://api.fnkr.net/testimg/200x200/2A353A/FFF/?text=img" alt="Alt text" title="title"></p>
<h2 id="html-標籤"><a href="#html-標籤" class="headerlink" title="html 標籤"></a>html 標籤</h2><p>可以調整寬高、寫樣式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;api.fnkr.net&#x2F;testimg&#x2F;200x200&#x2F;2A353A&#x2F;FFF&#x2F;?text&#x3D;img&quot; alt&#x3D;&quot;markdown&quot; style&#x3D;&quot;zoom:50%;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<img src="https://api.fnkr.net/testimg/200x200/2A353A/FFF/?text=img" alt="markdown" style="zoom:50%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;api.fnkr.net&#x2F;testimg&#x2F;200x200&#x2F;00CED1&#x2F;FFF&#x2F;?text&#x3D;img+placeholder&quot; width&#x3D;&quot;50&quot; height&#x3D;&quot;50&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<img src="https://api.fnkr.net/testimg/200x200/2A353A/FFF/?text=img" width="50" height="50"/>

<h1 id="程式區塊"><a href="#程式區塊" class="headerlink" title="程式區塊"></a>程式區塊</h1><h2 id="inline-程式碼"><a href="#inline-程式碼" class="headerlink" title="inline 程式碼"></a>inline 程式碼</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;function()&#96;</span><br></pre></td></tr></table></figure>

<p><code>function()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96; &#96;printf()&#96; &#96;&#96;</span><br></pre></td></tr></table></figure>

<p><code>`printf()`</code></p>
<h2 id="一般程式碼"><a href="#一般程式碼" class="headerlink" title="一般程式碼"></a>一般程式碼</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96;js</span><br><span class="line">  console.log(‘boo’);</span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">	console.log(&#39;boo&#39;);</span><br></pre></td></tr></table></figure>



<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&gt;&gt; 使用嵌套的引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用</p>
<blockquote>
<p>使用嵌套的引用</p>
</blockquote>
</blockquote>
<h2 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Step</span><br><span class="line">    - Step</span><br><span class="line">    - Step</span><br><span class="line">- Step</span><br><span class="line">    - Step</span><br><span class="line">    - Step</span><br><span class="line">    	 - Step</span><br></pre></td></tr></table></figure>

<ul>
<li>Step<ul>
<li>Step</li>
<li>Step</li>
</ul>
</li>
<li>Step<ul>
<li>Step</li>
<li>Step<ul>
<li>Step</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Item      | Price  | Number | Total| Remark</span><br><span class="line">----------|:------:|:------:| ------|------:|</span><br><span class="line">egg       | 10     |  2    |    20 | good   |</span><br><span class="line">meat      | 100    |  2    |   200 | 		-		|</span><br><span class="line">vegetable | 50     |  5    |   250 |		-		|</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  : 符號控制靠左或靠右</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Item</th>
<th align="center">Price</th>
<th align="center">Number</th>
<th>Total</th>
<th align="right">Remark</th>
</tr>
</thead>
<tbody><tr>
<td>egg</td>
<td align="center">10</td>
<td align="center">2</td>
<td>20</td>
<td align="right">good</td>
</tr>
<tr>
<td>meat</td>
<td align="center">100</td>
<td align="center">2</td>
<td>200</td>
<td align="right">-</td>
</tr>
<tr>
<td>vegetable</td>
<td align="center">50</td>
<td align="center">5</td>
<td>250</td>
<td align="right">-</td>
</tr>
</tbody></table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [x] item A</span><br><span class="line">- [ ] item B</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked="" disabled="" type="checkbox"> item A</li>
<li><input disabled="" type="checkbox"> item B</li>
</ul>
<h2 id="字體顏色大小"><a href="#字體顏色大小" class="headerlink" title="字體顏色大小"></a>字體顏色大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;blue size&#x3D;3 face&#x3D;&quot;微软雅黑&quot;&gt;字體&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color&#x3D;red size&#x3D;8 face&#x3D;&quot;微軟正黑體&quot;&gt;字體&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>

<p><font color=blue size=3 face="微软雅黑">顏色+字大小</font></p>
<p><font color=red size=8 face="微軟正黑體">顏色+字體大小</font></p>
<h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:smile:</span><br><span class="line">:sunny:</span><br><span class="line">:airplane:</span><br></pre></td></tr></table></figure>

<p>:smile:<br>:sunny:<br>:airplane:</p>
<p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">Emoji 代碼</a></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://dylan237.github.io/markdown.html" target="_blank" rel="noopener">Dylan’s Blog：Markdown 常用語法</a></p>
<p>這是朋友的筆記blog，每次都跑去看他的，<br>慢慢會把記不起來的東西，也在我這記錄下來（搬移?!:smirk:</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript常用的判斷方法</title>
    <url>/2021/10/23/conditional-statements/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>判斷是邏輯的起源，<br>寫得好、寫得巧、寫得呱呱叫，<br>這裡會把一些我覺得跟<strong>『判斷』</strong>有關且常用的東西放進來。</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/truefalse.jpg" alt="condition"></p>
<center>(圖片來源: 網路)</center>
<a id="more"></a>

<h1 id="判斷"><a href="#判斷" class="headerlink" title="判斷"></a>判斷</h1><p>故名意思，判斷就是要得到一個<strong>『是』</strong>或<strong>『不是』</strong>結果，而在JavaScript裡，我們期待得到的是<strong>『ture』</strong>或<strong>『false』</strong>或其他經由邏輯得到的結果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a等於b？</span></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>這就是一個簡單的判斷</p>
<h1 id="比較運算子-Comparison-operators"><a href="#比較運算子-Comparison-operators" class="headerlink" title="比較運算子 Comparison operators"></a>比較運算子 Comparison operators</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a等於b？</span></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a不等於b?</span></span><br><span class="line"><span class="built_in">console</span>.log(a != b); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a等於b？(嚴謹模式)</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a不等於b?(嚴謹模式)</span></span><br><span class="line"><span class="built_in">console</span>.log(a !== b); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a大於b</span></span><br><span class="line"><span class="built_in">console</span>.log(a &gt; b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a大於等於b</span></span><br><span class="line"><span class="built_in">console</span>.log(a &gt;= b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a小於b</span></span><br><span class="line"><span class="built_in">console</span>.log(a &lt; b); <span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a小於等於b</span></span><br><span class="line"><span class="built_in">console</span>.log(a &lt;= b); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tip: “!” 驚嘆在運算子中為相反的意思。 ex: !false === true</p>
</blockquote>
<p>這就是全部的比較運算子，基本上都是國小，使用上應該都很直覺。</p>
<p>比較值得留意的是嚴謹模式下的<strong>“===”</strong>與<strong>“!==”</strong></p>
<h2 id="嚴謹模式"><a href="#嚴謹模式" class="headerlink" title="嚴謹模式"></a>嚴謹模式</h2><p>在嚴謹模式開發現，可避免一些不必要的錯誤，在這裡我們只說明比較運算子的存在的兩個嚴謹模式，<strong>“===”</strong>與<strong>“!==”</strong>。</p>
<blockquote>
<p>Tip: 比較運算子沒有這種東西 “&gt;&gt;” “&lt;&lt;”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> == <span class="string">'3'</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="string">''</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//嚴謹模式</span></span><br><span class="line"><span class="comment">// number 不等於 string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> == <span class="string">'3'</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="string">''</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>在嚴謹模式下的比較運算子，會連<strong>『型別』</strong>也進行比較。</p>
<h1 id="邏輯運算子-Logical-operators"><a href="#邏輯運算子-Logical-operators" class="headerlink" title="邏輯運算子 Logical operators"></a>邏輯運算子 Logical operators</h1><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 =  <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>;     <span class="comment">// t &amp;&amp; t returns true</span></span><br><span class="line"><span class="keyword">var</span> a2 =  <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;    <span class="comment">// t &amp;&amp; f returns false</span></span><br><span class="line"><span class="keyword">var</span> a3 = <span class="literal">false</span> &amp;&amp; <span class="literal">true</span>;     <span class="comment">// f &amp;&amp; t returns false</span></span><br><span class="line"><span class="keyword">var</span> a4 = <span class="literal">false</span> &amp;&amp; (<span class="number">3</span> == <span class="number">4</span>); <span class="comment">// f &amp;&amp; f returns false</span></span><br><span class="line"><span class="keyword">var</span> a5 = <span class="string">"Cat"</span> &amp;&amp; <span class="string">"Dog"</span>;    <span class="comment">// t &amp;&amp; t returns 'Dog'</span></span><br><span class="line"><span class="keyword">var</span> a6 = <span class="literal">false</span> &amp;&amp; <span class="string">"Cat"</span>;    <span class="comment">// f &amp;&amp; t returns false</span></span><br><span class="line"><span class="keyword">var</span> a7 = <span class="string">"Cat"</span> &amp;&amp; <span class="literal">false</span>;    <span class="comment">// t &amp;&amp; f returns false</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title="||"></a>||</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 =  <span class="literal">true</span> || <span class="literal">true</span>;     <span class="comment">// returns true</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="literal">false</span> || <span class="literal">true</span>;     <span class="comment">// returns true</span></span><br><span class="line"><span class="keyword">var</span> o3 =  <span class="literal">true</span> || <span class="literal">false</span>;    <span class="comment">// returns true</span></span><br><span class="line"><span class="keyword">var</span> o4 = <span class="literal">false</span> || (<span class="number">3</span> == <span class="number">4</span>); <span class="comment">// returns false</span></span><br><span class="line"><span class="keyword">var</span> o5 = <span class="string">'Cat'</span> || <span class="string">'Dog'</span>;    <span class="comment">// returns 'Cat'</span></span><br><span class="line"><span class="keyword">var</span> o6 = <span class="literal">false</span> || <span class="string">'Cat'</span>;    <span class="comment">// returns 'Cat'</span></span><br><span class="line"><span class="keyword">var</span> o7 = <span class="string">'Cat'</span> || <span class="literal">false</span>;    <span class="comment">// returns 'Cat'</span></span><br></pre></td></tr></table></figure>

<p>“||” 可以看成『或著』的意思，由前面開始，只要是 null、 0、 NaN、 空字串 (“”)、undefined可以轉換為false的運算式，就會下面一位，直到符合或是最後一個。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o8 =  <span class="literal">null</span> || undefind || <span class="literal">false</span> || <span class="string">'Hi'</span>;  <span class="comment">// returns 'Hi'</span></span><br><span class="line"><span class="keyword">var</span> o9 =  <span class="literal">null</span> || <span class="string">'Hi'</span> || <span class="literal">false</span>;              <span class="comment">// returns 'Hi'</span></span><br><span class="line"><span class="keyword">var</span> o10 =  <span class="string">''</span> || <span class="string">'Hi'</span>;                        <span class="comment">// returns 'Hi'</span></span><br><span class="line"><span class="keyword">var</span> o11 =  <span class="number">0</span> || <span class="string">'Hi'</span>;                         <span class="comment">// returns 'Hi'</span></span><br><span class="line"><span class="keyword">var</span> o12 =  [] || <span class="string">'Hi'</span>;                        <span class="comment">// returns []</span></span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title="??"></a>??</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 =  <span class="number">1</span> ?? <span class="literal">true</span>;     <span class="comment">// returns 1</span></span><br><span class="line"><span class="keyword">var</span> b2 = 	<span class="literal">false</span> ?? <span class="literal">true</span>;    <span class="comment">// returns true</span></span><br><span class="line"><span class="keyword">var</span> b3 =  <span class="literal">null</span> ?? <span class="number">1</span>;    		<span class="comment">// returns 1</span></span><br><span class="line"><span class="keyword">var</span> b4 =  <span class="literal">undefined</span> ?? <span class="number">1</span>;   <span class="comment">// returns 1</span></span><br><span class="line"><span class="keyword">var</span> b5 =  <span class="number">0</span> ?? <span class="number">1</span>;    				<span class="comment">// returns 0</span></span><br><span class="line"><span class="keyword">var</span> b6 =  <span class="string">''</span> ?? <span class="string">'Hi'</span>;    		<span class="comment">// returns ''</span></span><br></pre></td></tr></table></figure>
<p><strong>Nullish coalescing operator (<code>??</code>)</strong>是我比較後來才知道的，有時候使用”??”會比”||”好，因為他的０或空字串””不會被判定略過，某些狀況下還是比較適合的。</p>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMeal</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (time) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'早餐'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'午餐'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">16</span>:					<span class="comment">//16跟17 共用結果</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'晚餐'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">      <span class="keyword">break</span>;					<span class="comment">//加上break會強迫終止判斷</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'宵夜'</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'沒了'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMeal(<span class="number">12</span>)); <span class="comment">//'午餐'</span></span><br><span class="line"><span class="built_in">console</span>.log(getMeal(<span class="number">16</span>)); <span class="comment">//'晚餐'</span></span><br><span class="line"><span class="built_in">console</span>.log(getMeal(<span class="number">20</span>)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>未達條件會繼續往下走，直到default。</p>
<h1 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMeal</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (time == <span class="number">7</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'早餐'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time == <span class="number">12</span>)&#123; <span class="comment">// 符合條件，結束判斷，以下不執行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'午餐'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time == <span class="number">17</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'晚餐'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'沒了'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMeal(<span class="number">12</span>)); <span class="comment">//'午餐'</span></span><br></pre></td></tr></table></figure>

<p>未達條件會繼續往下走，符合條件其中之一作件，會停止整個if…else判斷。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (time == <span class="number">7</span>) &#123;              <span class="comment">//if作為整個 if...else的開頭 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'早餐'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (time == <span class="number">12</span>) &#123;    <span class="comment">//else if 可作為下一個條件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'午餐'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (time == <span class="number">17</span>) &#123;    <span class="comment">//未達條件再往下走</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'晚餐'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;									 <span class="comment">//直到碰到 else 就必定結束</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'沒了'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (time == <span class="number">7</span>) &#123;             </span><br><span class="line">  <span class="keyword">return</span> <span class="string">'早餐'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;								</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'沒了'</span>;            <span class="comment">//不一定會有 else if</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (time == <span class="number">7</span>) &#123;              <span class="comment">//可以做一個簡單的判斷</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'早餐'</span>;            <span class="comment">//所以也不一定會有 else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有時判斷思路可以改變下，以 getMeal 的函式來說，可以寫成更簡潔的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMeal</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (time == <span class="number">7</span>)<span class="keyword">return</span> <span class="string">'早餐'</span>;</span><br><span class="line">  <span class="keyword">if</span> (time == <span class="number">12</span>)<span class="keyword">return</span> <span class="string">'午餐'</span>;</span><br><span class="line">  <span class="keyword">if</span> (time == <span class="number">17</span>)<span class="keyword">return</span> <span class="string">'晚餐'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'沒了'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMeal(<span class="number">12</span>)); <span class="comment">//'午餐'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tip: 如果判斷是只有簡單的對或錯可以使用”三元表達式”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTure</span>(<span class="params">boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(boolean == <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'Yes'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boolean == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'No'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看起來可以簡單點</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTure</span>(<span class="params">boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(boolean == <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'Yes'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'No'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在拿掉一點東西</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTure</span>(<span class="params">boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(boolean == <span class="literal">true</span>) <span class="keyword">return</span>(<span class="string">'Yes'</span>);</span><br><span class="line">  <span class="keyword">return</span>(<span class="string">'No'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三元表達式 來囉</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTure</span>(<span class="params">boolean</span>) </span>&#123;</span><br><span class="line">  boolea ? <span class="keyword">return</span>(<span class="string">'Yes'</span>) : <span class="keyword">return</span>(<span class="string">'No'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>三元表達式 ＝&gt; “ 判斷 ? 結果一  : 結果二 “</p>
</blockquote>
<p>可以想像成，如果判斷是對的話，走結果一，其他走結果二。</p>
<h1 id="Optional-chaining"><a href="#Optional-chaining" class="headerlink" title="Optional chaining (?.)"></a>Optional chaining (?.)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">  name: <span class="string">'Alice'</span>,</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: <span class="string">'Dinah'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dogName = adventurer.dog?.name;</span><br><span class="line"><span class="built_in">console</span>.log(dogName);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(adventurer.someNonExistentMethod?.());</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>如我物件找不到的話會直接終止，給予undefined，並不會繼續往下找，省得一些不必要的過程。<br>但在一些程式中需要防呆機制，以保證就算找不到想要的值，程式還是可以正常地跑下去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dogName = adventurer.dog?.name ?? <span class="string">'No name'</span></span><br><span class="line"><span class="built_in">console</span>.log(dogName);</span><br><span class="line"><span class="comment">// 'No name'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(adventurer.someNonExistentMethod?.() ?? <span class="string">'NonExistentMethod'</span>);</span><br><span class="line"><span class="comment">// 'NonExistentMethod'</span></span><br></pre></td></tr></table></figure>

<h2 id="為什麼不用「-」"><a href="#為什麼不用「-」" class="headerlink" title="為什麼不用「||」"></a>為什麼不用「||」</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">  name: <span class="string">'Alice'</span>,</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> catName = adventurer.cat?.name ?? <span class="string">'No name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(catName);</span><br><span class="line"><span class="comment">// ''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> catName2 = adventurer.cat?.name || <span class="string">'No name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(catName2);</span><br><span class="line"><span class="comment">// 'No name'</span></span><br></pre></td></tr></table></figure>
<p>完全是看自己需求，看前面提到的，如果你需要如果找到的值，<br>只要是 null、 0、 NaN、 空字串 (“”)、undefined可以轉換為false的運算式，就往下的話，就可以用||。</p>
<blockquote>
<p>Tip: 在??中，0 或是 “”，都會被保留。</p>
</blockquote>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>我只寫些常用且比較直覺關於判斷的東西，歡迎批評指教。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#assignment_operators" target="_blank" rel="noopener">MDN Web Docs</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JS基本功</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>var, let, const多基本的東西</title>
    <url>/2021/02/11/variable-declaration/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>距上次更新已經八個多月，除了工作上學到的新東西，<br>好像沒有當初自學時的那股衝勁與熱情。<br>我還是覺得前端的一切很好玩，<br>但怎麼說呢…</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/002/1579416003413.jpg" alt="我就懶"><br><a href="https://memes.tw/wtf/133544" target="_blank" rel="noopener">圖片來源</a></p>
<a id="more"></a>
<p>有聽人說過，你知道五六年前是沒有前端工程師這職位的，技術變更很快，前端是學不完的，如果只會在原地踏步，三五年後可能也無法生存。<br>所以我不想耍廢，但也不知道要寫什麼，就從些基本的開始，累積點東西吧!</p>
<h1 id="先說結論"><a href="#先說結論" class="headerlink" title="先說結論"></a>先說結論</h1><h2 id="不要用var"><a href="#不要用var" class="headerlink" title="不要用var"></a>不要用var</h2><p>現在的工作專案上，已經很少看到var了（至少我工作上沒用過），比起var，盡量使用let、const，可以避免掉全域汙染、重複宣告…等很多不必要的麻煩。</p>
<h1 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h1><p>在程式裡，會大量使用到變數，要使用變數就要先執行宣告。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is not defined'　沒有被宣告所以不認識</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 告訴程式，有一個名為foo的變數產生，並賦予值10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h1 id="為什麼用let-不用var"><a href="#為什麼用let-不用var" class="headerlink" title="為什麼用let 不用var"></a>為什麼用let 不用var</h1><h2 id="1-全域變數、區域變數"><a href="#1-全域變數、區域變數" class="headerlink" title="1.全域變數、區域變數"></a>1.全域變數、區域變數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//全域性作用</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>; <span class="comment">//作用在當前區塊的變數</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); </span><br><span class="line">  <span class="built_in">console</span>.log(b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 10, 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//10 以瀏覽器為例，全域就是window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="2-block-level-scope（塊級作用域）"><a href="#2-block-level-scope（塊級作用域）" class="headerlink" title="2.block-level scope（塊級作用域）"></a>2.block-level scope（塊級作用域）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//存在於函式中</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span>;　<span class="comment">//存在於整個全域，這裡的全域是整個function</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">40</span>; <span class="comment">//只存在"&#123;&#125;"區塊</span></span><br><span class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//30</span></span><br><span class="line">    <span class="built_in">console</span>.log(d);<span class="comment">//40 存在"&#123;&#125;"中的區塊不會外洩</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//20</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">//30</span></span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">//'d is not defined'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 10, 20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//'a is not undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//'b is not defined'</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//40</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//'d is not defined'</span></span><br></pre></td></tr></table></figure>
<p>let 是塊級作用域，簡言之，他是存在於”{}”內的，像是if,while…等用到”{}”判斷、迴圈之類的，跟function的函示作用域不同</p>
<h2 id="3-沒有hoising（變量提升）"><a href="#3-沒有hoising（變量提升）" class="headerlink" title="3.沒有hoising（變量提升）"></a>3.沒有hoising（變量提升）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is not defined'</span></span><br></pre></td></tr></table></figure>
<p>剛剛有提到在程式中要用到變數就需要先宣告，我要使用到<strong>foo</strong>(範例用的變數名稱)，如果沒有先宣告的就會會跑出<strong>foo is not defined</strong>報錯訊息，意思是這個<strong>foo</strong>並沒有被定義過，程式不認識<strong>foo</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is undefined'　宣告後但沒有值</span></span><br><span class="line"></span><br><span class="line">foo = <span class="number">10</span>　<span class="comment">//賦予foo值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p><strong>foo</strong>被宣告了以後，就可以取用，不過還沒賦予值的<strong>foo</strong>會跑出<strong>foo is undefined</strong>的警告訊息，並不會報錯</p>
<h3 id="如果不按順序宣告呢"><a href="#如果不按順序宣告呢" class="headerlink" title="如果不按順序宣告呢"></a>如果不按順序宣告呢</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">var</span> foo;</span><br></pre></td></tr></table></figure>
<p>剛剛學到了要先宣告foo才能取用，不然會出現<strong>foo is not defined</strong><br>結果是<br>.<br>.<br>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'foo is undefined'</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>只要有宣告，就會把變數提升到最上面，不管先後順序都可以呼叫到，這就是<strong>hoising變量提升）</strong>，不過賦值並不會跟著提升。<br>換作是let呢<br>.<br>.<br>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'Uncaught ReferenceError: Cannot access 'foo' before initialization'</span></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>這是什麼東東<br>.<br>.<br>.</p>
<h3 id="temporal-dead-zone-TDZ-暫時性死區"><a href="#temporal-dead-zone-TDZ-暫時性死區" class="headerlink" title="temporal dead zone, TDZ (暫時性死區)"></a>temporal dead zone, TDZ (暫時性死區)</h3><p>let沒有hoising（變量提升），使用let時會使區塊形成封閉的作用域，換句話說</p>
<h3 id="在還沒宣告以前都不能使用它"><a href="#在還沒宣告以前都不能使用它" class="headerlink" title="在還沒宣告以前都不能使用它"></a>在還沒宣告以前都不能使用它</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//'Uncaught ReferenceError: Cannot access 'foo' before initialization'</span></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//'foo is undefined'</span></span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h2 id="4-不允許重複宣告"><a href="#4-不允許重複宣告" class="headerlink" title="4.不允許重複宣告"></a>4.不允許重複宣告</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>foo已經用var宣告過了，又可以重複宣告不會報錯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>; <span class="comment">//我在這裡是唯一的foo，不准覆蓋我</span></span><br><span class="line">foo = <span class="number">20</span> <span class="comment">// 20 賦值還是可以的</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">20</span>; <span class="comment">// 'foo' has already been declared</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">20</span>; <span class="comment">// 'foo' has already been declared</span></span><br></pre></td></tr></table></figure>
<p>使用let宣告後的變數，如果重複宣告會報錯，因此使用let可以避免掉重複取名覆蓋掉變數的問題。</p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const 特性與let大多相似，但</p>
<h2 id="1-一定要有值"><a href="#1-一定要有值" class="headerlink" title="1.一定要有值"></a>1.一定要有值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLuckyNumber; <span class="comment">//Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<p>宣告時一定要賦予值</p>
<h2 id="2-不可重複賦予值"><a href="#2-不可重複賦予值" class="headerlink" title="2.不可重複賦予值"></a>2.不可重複賦予值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(myLuckyNumber)<span class="comment">//7</span></span><br><span class="line">myLuckyNumber = <span class="number">8</span>　<span class="comment">// Assignment to constant variable'</span></span><br><span class="line"><span class="keyword">const</span> myLuckyNumber = <span class="number">8</span> <span class="comment">// 'myLuckyNumber' has already been declared</span></span><br></pre></td></tr></table></figure>
<p>const為’常數’，不可重複賦予值與宣告，所以通常是用來放不會變的值，我的幸運數字是’7’不會變。</p>
<h2 id="3-物件依然是參考"><a href="#3-物件依然是參考" class="headerlink" title="3.物件依然是參考"></a>3.物件依然是參考</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//5</span></span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<p>剛剛第二點不是說’不可重複賦予值’，怎麼又可以更改裡面的值，那是因為物件是傳參考(by reference)而非傳值(by value)，所以在此依然可以修改屬性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="comment">//'person' has already been declared </span></span><br><span class="line">  name: <span class="string">'Roman'</span>,</span><br><span class="line">  age: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">'Roman'</span><span class="comment">//'person' has already been declared</span></span><br></pre></td></tr></table></figure>
<h3 id="不能重複指定值、但依然可以修改屬性。"><a href="#不能重複指定值、但依然可以修改屬性。" class="headerlink" title="不能重複指定值、但依然可以修改屬性。"></a>不能重複指定值、但依然可以修改屬性。</h3><h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這主題應該是很多人的第一篇文，都看到爛了，但自己實際下來寫感覺又很新奇。<br>在工作上很多用法都已經習以為常，知道怎麼使用這些宣告，對專案比較好，但如果突然我問我差別或是以上這些東西，一時間還真的會呆滯個幾秒鐘，不知道怎麼解釋，這就是為什麼要自己整理一遍，雖然是基本的東西，但底層越穩健，累積起來對以後整個思考的邏輯會很有幫助。</p>
<p>如果本篇有哪個地方有誤，歡迎指教：）</p>
<p>想看更詳細的解說可以點擊下方參考資料。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://cythilya.github.io/2016/10/28/es6-let-const-block-level-scope/" target="_blank" rel="noopener">Summer。桑莫。夏天：ES6: let, const, Block-Level Scope</a><br><a href="https://eddychang.me/es6-tdz/" target="_blank" rel="noopener">EddyChang：理解ES6中的暫時死區(TDZ)</a><br><a href="https://blog.csdn.net/u013263917/article/details/106673193" target="_blank" rel="noopener">坤小：var与let区别-详解块级作用域与局部作用域</a><br><a href="https://wcc723.github.io/javascript/2017/12/20/javascript-es6-let-const/" target="_blank" rel="noopener">卡斯伯：ES6 開始的新生活 let, const</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>奇怪部分</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>2020非本科轉職前端工程師【心路歷程】</title>
    <url>/2020/05/29/2020onTansfer/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/DO-MORE.jpg" alt="do-more"></p>
<a id="more"></a>
<center>圖片來源： 網路</center>
<br>

<blockquote>
<p><strong>DO MORE</strong></p>
</blockquote>
<p>這是我的桌布，源自我最喜歡的YouTuber「<strong>CaseyNeistat</strong>」，</p>
<p>別人看不到你努力，<strong>DO MORE</strong><br>達不到自己的目標，<strong>DO MORE</strong></p>
<p>很多時候不是沒有辦法，只是你需要比別人再多努力一些。<br><del>(雖然原意好像不是這樣)</del></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從第一次聽到前端到找到第一份前端工作，歷經近半年的時間，終於在六月一號要正式報到了，想在正式上班前做個紀錄，不然說不定下禮拜就離職了（笑<br><br></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>私立科技大學設計科系畢業，說來慚愧，學生時期有接觸過遊戲課程，但卻對遊戲程式的部分興致缺缺，或是說不願意面對，覺得很麻煩、排斥，結果我現在…<br><br></p>
<h2 id="結束澳洲打工度假"><a href="#結束澳洲打工度假" class="headerlink" title="結束澳洲打工度假"></a>結束澳洲打工度假</h2><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/cover.jpg" alt="Daily-VLOG" title="我的第一支Daily-VLOG"><br>圖片來源：<a href="https://www.youtube.com/watch?v=Nn4M9d89yUo&t" target="_blank" rel="noopener">Roman羅曼</a> </p>
<br>

<p>2019/11月澳洲打工度假結束，我在峇里島玩了兩個禮拜，11月回到台灣。</p>
<p>當時的我還在天天更新我的<a href="https://www.youtube.com/watch?v=5WJIU2soJlY&t" target="_blank" rel="noopener">生活Vlog</a> ，經營自己的YouTube頻道，天真如我想著，靠在澳洲存到的錢，支持我在台灣的YouTube拍片事業，給自己半年的時間專心做做看，說不定有搞頭，但越做越對這一切感受到疲乏…</p>
<h3 id="拍片還是當興趣好"><a href="#拍片還是當興趣好" class="headerlink" title="拍片還是當興趣好"></a>拍片還是當興趣好</h3><p>雖然拍出來的生活Vlog都是我自己喜歡的東西，但點閱率實在有點慘，拍了一些觀眾取向的影片，自己又很不喜歡，好幾次為了拍影片不開心，很不想承認，但如果要把YouTuber當全職…<br><br><br><strong>可能還是不太適合我</strong><br><br><br><br></p>
<h2 id="第一次聽到前端工程師"><a href="#第一次聽到前端工程師" class="headerlink" title="第一次聽到前端工程師"></a>第一次聽到前端工程師</h2><p>11月底，某一次的飯局得知我的好朋友，<br>居然是…<br><strong>前端工程師</strong>?!<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p>
<p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/surprise.jpg" alt="surprise"></p>
<center>圖片來源： 網路</center>

<br>
什麼前端後端中端的，我不懂啦！

<p><strong>工程師</strong>欸，聽起來超帥的！</p>
<p>要寫程式？！</p>
<p>什麼？已經工作一年了？！</p>
<p>意想不到…</p>
<p>他說他靠著職訓局，還有自學（這是重點），成功轉職所謂的前端工程師。</p>
<p>雖然工程師聽起來很威，</p>
<p>但其實我聽到的當下第一個反應…</p>
<h3 id="原來前端工程師那麼好當喔"><a href="#原來前端工程師那麼好當喔" class="headerlink" title="原來前端工程師那麼好當喔"></a>原來前端工程師那麼好當喔</h3><p>但開始學習後…<br>.<br>.<br>.<br>.<br>.<br><br><br><br><br><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/cat.jpg" alt="When I learning"></p>
<center>圖片來源： 網路</center>

<h3 id="怎麼都看不懂"><a href="#怎麼都看不懂" class="headerlink" title="怎麼都看不懂"></a>怎麼都看不懂</h3><p>一個那麼要好的朋友突然成了工程師，對於前端工程師，好奇心大爆發，我開始尋找相關資料，以及相關知識。</p>
<p>原本是想說如果我朋友能懂這些東西，我一定也能懂，殊不知越看越蒙，越看越崇拜他…與其說是不服輸，不如說，他讓我看到了一些不一樣的希望？只要努力去學程式，沒有學不會的，可以看到努力的成果，大學時期對程式的排斥，逐漸瓦解…<br><br></p>
<h2 id="我要當前端工程師"><a href="#我要當前端工程師" class="headerlink" title="我要當前端工程師"></a>我要當前端工程師</h2><p>定下學習目標，跟自己說</p>
<blockquote>
<p><strong>六月的時候，我就是前端工程師了</strong></p>
</blockquote>
<p>正式投入學習後，剛開始在家學習，也有跑過圖書館，後來覺得出門很浪費時間，而且圖書館有股想睡覺的魔力，就乾脆在家裡，反正效果也不差，重點是要約束自己，不要分心。<br>每個人的讀書方式都不一樣，可以參考網路上的人，如果不適合就果斷換，找出適合自己的讀書方式，才能有效率的學習。<br><br></p>
<h3 id="線上課程，試試水溫"><a href="#線上課程，試試水溫" class="headerlink" title="線上課程，試試水溫"></a>線上課程，試試水溫</h3><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/udemy-logo.jpg" alt="Udemy"></p>
<center>圖片來源：Udemy</center>
<br>

<p>同年12月底，我在Udemy挑了一個特價300元，4顆星以上的前端入門課程，內容包含HTML、CSS、JavaScript，想說聽聽看，如果真的對寫程式有興趣再投入，如果覺得很無聊，就算了，反正300塊而已。</p>
<p>這邊也非常推薦不知道自己適不適合的人，可以直接去買一堂課來聽聽看，有些基礎的東西，免費資源跟付費資源還是有差別的，有點基礎在看免費資源，比較能理解那些東西在幹嘛。</p>
<p>其實當初剛開始上線上課程時，我常常聽到睡著，<del>可能跟圖書館有關</del>，後來過了某個階段後，對整體的架構越來越清楚，睡著的次數越來越少，甚至直接熬夜，只為了完成一個小功能。<br><br><br><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/hexschool-logo.jpg" alt="hexschool"></p>
<center>圖片來源：六角學院</center>
<br>
上到2020年1月，我買了六角的JavaScript入門課程，六角在線上課程界的地位無庸置疑，擁有許多成功轉職的學員，講師把課程內容講解地平易近人，對於剛入門的我來說，課程非常值得，不得不說，六角的社群經營得非常成功，臉書社團還有群組，有任何問題在上面發問，大家都會非常熱心地回答，就算人緣不好，至少還有專屬的助教跟老師會替你友善的解答，非常用心。



<h3 id="全職學習"><a href="#全職學習" class="headerlink" title="全職學習"></a>全職學習</h3><p>1月開始，沒有工作的我，除了一些特殊節日，或旅遊，每天的生活就是</p>
<p><strong>起床&gt;學習&gt;吃飯&gt;學習&gt;吃飯&gt;學習&gt;睡覺</strong></p>
<p>日復一日，每天過得差不多的生活，偶爾跟朋友見個面吃個飯，回家繼續學習，禮拜一到日，平均學習時數，保守估計至少六小時以上，注意，是「保守估計」，常常會到半夜一兩點才睡，只為了解一個Bug，非本科系畢業的我知道，也程式方面沒有特別的天份，需要更多的學習時間，才能縮小這些差距，現在回想起來，這好像是我第一次，花那麼多時間在持續的學習某項技能上面，這應該就是對寫程式的熱忱吧。<br><br></p>
<h3 id="學習夥伴"><a href="#學習夥伴" class="headerlink" title="學習夥伴"></a>學習夥伴</h3><p>自已學習以外，有個可以互相討論，發問的對象也是很重要的，除了線上課程上的老師，我還有已經在業界的工程師朋友，大約每1-3個禮拜，我們會相約去咖啡廳，向他了解前端技術的問題，而他也不是告訴直接我答案，是引導我想出答案，興致來了，還會告訴我一大堆他覺得我要會的東西，將來會遇到的問題，<del>儘管有時會我根本聽不懂（資訊量過大）</del>，我很幸運學習的路上有這位朋友。<br><br></p>
<h3 id="充滿好奇＆自學能力"><a href="#充滿好奇＆自學能力" class="headerlink" title="充滿好奇＆自學能力"></a>充滿好奇＆自學能力</h3><p>前端領域需要學習大量的技術，有些東西不可能都等別人來教，才來應用，官方網站的文件，有時候可能是最快的學習途徑，充滿好奇以及自學能力在這行非常重要，東西只會越來越多，我感到非常喜歡，有種學不完的感覺，頗有挑戰性。</p>
<p>有人說前端領域，入門容易挖深難，踏入之後，你會發現要學的東西越來越多，技術觀念可能每幾年幾個月，就要更新一次，所以前端工程師務必要有熱情，沒有熱情、沒有好奇心，可能3-5年後就會被淘汰了。<br><br></p>
<h2 id="學習瓶頸-amp-挫折"><a href="#學習瓶頸-amp-挫折" class="headerlink" title="學習瓶頸&amp;挫折"></a>學習瓶頸&amp;挫折</h2><p><img src="https://raw.githubusercontent.com/rccj/images/master/blog/001-2020onTransfer/coding.jpg" alt="When I coding"></p>
<center>圖片來源：網路</center>
<br>

<p>在學習的過程中，好幾次的懷疑自己的智商，懷疑人生，會不斷的遭遇挫折掉入谷底，你只能不斷的爬出來，解決這些你面臨的問題，除不完的Bug，一個語法錯誤卡了一個下午，各式各樣的狀況與挫折就不在一一舉例，這是新手必經之路。<br><br></p>
<blockquote>
<p>當工程師就是要去習慣甚至享受解決問題的過程</p>
</blockquote>
<br>


<p><strong>為什麼我不懂</strong></p>
<p><strong>我好笨</strong></p>
<p>這些聲音在學習的路上不斷出現，看著那些工程師，不免浮出這些聲音，覺得自己很笨，可能不適合寫程式，他們感覺學得很輕鬆…</p>
<br>

<blockquote>
<p>你不知道他們付出多少努力</p>
</blockquote>
<br>

<p>大多數的人都不是天才，你不知道他們花了多久時間，付諸多少努力，才有現在你所看到的樣子，我朋友跟我說，你踩過的坑，遇過的Bug，那些你所謂的高手，他們學習時遇到的不會比你少。<br><br></p>
<h2 id="投履歷＆找到工作"><a href="#投履歷＆找到工作" class="headerlink" title="投履歷＆找到工作"></a>投履歷＆找到工作</h2><p>雖然沒有完成每一項學習計畫，但大方向沒有偏離，持續的前往，1月到3月，基礎的課程都結束以後，我花了整個4月，一個月的時間，完成一個<a href="https://rccj.github.io/roman-store/#/">電商網站</a>，以電商網站為主加一些零星的小作業完成的履歷，開始狂投遞，獲得面試機會，如期在六月份的時候準備前往第一份前端工程師的工作。</p>
<p>關於面試，又是另一個故事了，有時間我會整理相關資訊，</p>
<p>跟大家分享～</p>
<br>

<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>本來想要打出很厲害的心路歷程文章，卻變成想到什麼打什麼的大雜燴，但比想像中的內容還精簡，希望讀者不會介意，如果有想到什麼會再回來補充，讓文章更完整。</p>
]]></content>
      <categories>
        <category>轉職心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>心得</tag>
        <tag>前端工程師</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/23/hello-world/</url>
    <content><![CDATA[<h1 id="明天再更新"><a href="#明天再更新" class="headerlink" title="明天再更新"></a>明天再更新</h1><p>ㄎㄎ </p>
]]></content>
      <categories>
        <category>First</category>
      </categories>
      <tags>
        <tag>First</tag>
      </tags>
  </entry>
</search>
